#include <iostream>
#include <cstring>
#include "utilities.h"
using namespace std;


int playOneRound(const char words[][MAXWORDLEN + 1], int nWords, int wordnum);
void removeChar(char string1[], int pos);
int lookupChar(const char string1[], char search);

const int MAXWORDS = 9000;

int main(int argc, const char * argv[]) {
    
//     declare an arary of c strings, filename, number of words
    char wordList[MAXWORDS][MAXWORDLEN + 1];
    const char WORDFILENAME[] = "/Users/kunalsinghal/OneDrive/old classes/cs31/project5files/words1.txt";
    const int WORDSTOLOAD = 7265;

//     declare word file name with path
    int wordsGot =  getWords(wordList, WORDSTOLOAD, WORDFILENAME); // variable knows how many words have been generated by getWords
    //this variable will be used later on to make sure we do not attempt to use words that have not been input
    
    if (  wordsGot  < 1 ||  wordsGot > WORDSTOLOAD){
        cout << "No words were loaded, so I can't play the game." << endl;
        return -1;
    }
        
//     ask for number of rounds, round value acceptable check
    int numRounds;
    
    cout << "How many rounds do you want to play? ";
    cin >> numRounds;
    cin.ignore(10000, '\n');

    
    if (numRounds < 0){
        cout <<     "The number of rounds must be positive." << endl;
        return -1;
    }
    
    //cerr << "words got:" << wordsGot << endl;
    
    int totalScore = 0;
    int minimumScore = 0;
    int maximumScore = 0;
    
    cout.setf(ios::fixed);
    cout.precision(2);
    
    for(int currentRound = 1; currentRound <= numRounds; currentRound++){
        cout << endl << "Round " << currentRound << endl;
        
        int wordnum = randInt(0, wordsGot - 1);
        cout << "The hidden word is " << strlen(wordList[wordnum]) << " letters long." << endl;
        
        cerr << "word is: " << wordList[wordnum] << endl;
        
        int roundScore = playOneRound(wordList, wordsGot, wordnum);
        if (roundScore < 0){
            cout << "Program failed." << endl;
            return -1;
        }
        
        //accumulates total score
        totalScore += roundScore;
        
        //assigns initial values for min and max, next two assign min and max as game continues
        if(currentRound == 1){
            minimumScore = roundScore;
            maximumScore = roundScore;
        }
        
        if (maximumScore < roundScore)
            maximumScore = roundScore;
        
        if (minimumScore > roundScore)
            minimumScore = roundScore;
        
        //if got in one round, versus multiple rounds
        switch (roundScore) {
            case 1:
                cout << "You got it in 1 try." << endl;
                break;
            default:
                cout << "You got it in " << roundScore << " tries." << endl;
                break;
        }
        //end of round info
        cout << "Average: " << 1.0 * totalScore / currentRound << ", minimum: " << minimumScore << ", maximum: " << maximumScore << endl;
        
    }
    
    return 0;
}




int playOneRound(const char words[][MAXWORDLEN + 1], int nWords, int wordnum){
    
    
//     if wordnum is less than 0 or greater than/equal to n words - retrun -1
    if (wordnum < 0 || wordnum >= nWords)
        return -1;
    
    int numTries = 0;
    
    for(;;){
        cout << "Probe word: ";     //gets probe word
        char probe[100];
        cin.getline(probe, 100);
        
        char solutionWord[7];       //also copies down solution word
        strcpy(solutionWord, words[wordnum]);
        
        //checks if probe is solution
        if (strcmp(probe, solutionWord) == 0)
            return numTries + 1;            //adds one because the increment for each round is typically added later
        
//        if word is successful return number of tries and end function

        
        bool allLowercase = true;
        for (int i = 0; i < strlen(probe); i++){
            if(isupper(probe[i])){
                allLowercase = false;
                break;
            }
        }
        
//        preliminary checks for length and case
        if(strlen(probe) < MINWORDLEN || strlen(probe) > MAXWORDLEN || allLowercase == false){
            cout << "Your probe word must be a word of 4 to 6 lower case letters." << endl;
            continue;
        }
        
//        checks if in list
        bool inList = false;
        for (int i = 0; i < nWords; i++){
            if (strcmp(probe, words[i]) == 0){
                inList = true;
                break;
            }
        }
        
        if (inList == false){
            cout << "I don't know that word." << endl;
            continue;
        }
        
//        increments we have begun one word attempt
        numTries++;
        
        
        int numGolds = 0;
        int numSilvers = 0;
        
//        gold counter
        for (int i = 0; probe[i] != '\0' && solutionWord[i] != '\0'; i++){
            if (probe[i] == solutionWord[i]){       //iterates through both words checking if any letters are identical, if char is successful, is removed from both words and is added to gold counter
                numGolds++;
                removeChar(probe, i);
                removeChar(solutionWord, i);
                i--;
            }
        }
        
//        silver counter
        for (int i = 0; probe[i] != '\0'; i++){
            int matchIndex = lookupChar(solutionWord, probe[i]);        //iterates through probe, and checks all solution for each letter in probe. if any matches, removed from both words and adds to silver counter
            if (matchIndex >= 0){
                numSilvers++;
                removeChar(solutionWord, matchIndex);
                removeChar(probe, i);
                i--;
            }
        }
        
        //outputs number of golds and silvers
        cout << "Golds: " << numGolds << ", Silvers: " << numSilvers << endl;
    }
    
}


void removeChar(char string1[], int pos){
    
    int i;
    for (i = pos + 1; string1[i] != '\0'; i++ ){    //removes character at designated position by shifting all characters after to the left by 1
        string1[i-1] = string1[i];
    }
    
    string1[i - 1] = '\0';
    
}

int lookupChar(const char string1[], char search){
    
    for (int i = 0; string1[i] != '\0'; i++){       //looks through word for search character, returns first position of character if found
        if (string1[i] == search)
            return i;
    }
    return -1;
}
